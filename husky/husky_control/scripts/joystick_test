#!/usr/bin/env python
import time
import rospy
import actionlib
from control_msgs.msg import *
from trajectory_msgs.msg import *
from sensor_msgs.msg import Joy
import urllib2
import cv2

JOINT_NAMES = ['ur5_arm_shoulder_pan_joint', 'ur5_arm_shoulder_lift_joint', 'ur5_arm_elbow_joint', 'ur5_arm_wrist_1_joint', 'ur5_arm_wrist_2_joint', 'ur5_arm_wrist_3_joint']

ZERO_THRESH = 0.00000001

q = [-1.57,-0.1745,-2.79,-1.57,0,0]

client = None

def callback(data):

	q[0] = q[0] + ((data.buttons[6] - data.buttons[7]) * 0.1)
	q[1] = q[1] + ((data.buttons[0] - data.buttons[3]) * 0.1)
	q[2] = q[2] + ((data.buttons[1] - data.buttons[2]) * 0.1)
	q[3] = q[3] + ((data.axes[7]) * 0.1)
	q[4] = q[4] + ((data.axes[6]) * -0.1)
	q[5] = q[5] + ((data.buttons[4] - data.buttons[5]) * 0.1)
	rospy.loginfo(str(q[0]) + " " + str(q[1]) + " " + str(q[2]) + " " + str(q[3]) + " " + str(q[4]) + " " + str(q[5]))
	rospy.loginfo('-----------------')

	client = actionlib.SimpleActionClient('arm_controller/follow_joint_trajectory', FollowJointTrajectoryAction)

        print "Waiting for ur5_arm server..."
        client.wait_for_server()
        print "Connected to ur5_arm server"
        g = FollowJointTrajectoryGoal()
	g.trajectory = JointTrajectory()
    	g.trajectory.joint_names = JOINT_NAMES
	g.trajectory.points = [
		JointTrajectoryPoint(positions=q, velocities=[0]*6, time_from_start=rospy.Duration(2.0))]

    	client.send_goal(g)

    	try:
        	client.wait_for_result()
    	except KeyboardInterrupt:
        	client.cancel_goal()
        	raise

def main():
    	global client
    	try:
        	rospy.init_node("test_move", anonymous=True, disable_signals=True)
		rospy.Subscriber("/joy", Joy, callback)
        	client = actionlib.SimpleActionClient('arm_controller/follow_joint_trajectory', FollowJointTrajectoryAction)

		rospy.spin()

	except KeyboardInterrupt:
        	rospy.signal_shutdown("KeyboardInterrupt")
        	raise

if __name__ == '__main__': main()

